select(!any_of(sm)) %>%
summarize(across(everything(), ~list(count(as_tibble_col(.), across(everything()))))) %>%
pivot_longer(!any_of("call_location"), names_to = "name", values_to = "value") %>%
unnest(value) %>%
mutate(name2 = paste0(call_location,"_",name)) %>%
full_join(nn, by = "call_location") %>%
unite("key", name, value, sep = "__")
cr_xx <- cr_x %>%
filter(str_detect(key, "__NA")) %>%
mutate(nn = nn - n) %>%
select(name2,nn)
cr_x <- cr_x %>%
filter(!str_detect(key, "__NA")) %>%
left_join(cr_xx, by="name2") %>%
mutate(nn = case_when(is.na(nn.y) ~ nn.x,
!is.na(nn.y) ~ nn.y)) %>%
mutate(pc = n/nn) %>%
select(call_location, item = key, n, pc) %>%
filter(!str_detect(item, "__0")) %>%
mutate(item = gsub("\\.","__",gsub('__1',"",item)))
cn_x <- df %>%
# Adds all columns related to credit numbers
select(starts_with(c("credit_max","credit_total"))) %>%
mutate(across(!starts_with("call"), as.numeric)) %>%
# Get median and quartiles
summarise(across(everything(),  list(
median = ~ median(.x, na.rm = TRUE),
q1 = ~ quantile(.x, 0.25, na.rm = TRUE),
q3 = ~ quantile(.x, 0.75, na.rm = TRUE)
)))
# Prices
pr_iz <- pr_i %>%
# Delete items with less than three prices
filter(check == TRUE) %>%
group_by(item) %>%
summarise(
call_location = "_global",
nv = sum(nv),
q1 = median(q1, na.rm = TRUE),
q3 = median(q3, na.rm = TRUE),
median = median(median, na.rm = TRUE),
vendor_type = vendor_type
) %>%
distinct()
pr_i <- pr_i %>%
bind_rows(pr_iz)
# Stock
st_iz <- st_i %>%
# Delete items with less than three prices
filter(check == TRUE) %>%
group_by(item) %>%
summarise(
call_location = "_global",
across(where(is.numeric), ~ median(.x, na.rm = TRUE)),
vendor_type = vendor_type
) %>%
distinct()
st_i <- st_i %>%
bind_rows(st_iz)
# Barrier
ba_xz <- ba_x %>%
select(!n) %>%
# Horizontalize
pivot_wider(names_from = "item", values_from = "pc") %>%
replace(is.na(.),0)
# Create a line with medians of medians
ba_xz0 <- ba_xz %>%
summarise(across(!starts_with("call_location"), ~ median(.x, na.rm = TRUE))) %>%
mutate(call_location = "_global")
# Merge global values with locations
ba_x <- ba_xz %>%
bind_rows(ba_xz0) %>%
select(sort(names(.))) %>%
relocate(call_location)
### Payment
pa_xz <- pa_x %>%
select(!n) %>%
# Horizontalize
pivot_wider(names_from = "item", values_from = "pc") %>%
replace(is.na(.),0)
# Create a line with medians of medians
pa_xz0 <- pa_xz %>%
summarise(across(!starts_with("call_location"), ~ median(.x, na.rm = TRUE))) %>%
mutate(call_location = "_global")
# Merge global values with locations
pa_x <- pa_xz %>%
bind_rows(pa_xz0) %>%
select(sort(names(.))) %>%
relocate(call_location)
### Supplier
su_xz <- su_x %>%
group_by(item) %>%
summarise(
call_location = "_global",
n = sum(n),
pc = median(pc, na.rm = TRUE)
) %>%
distinct()
su_x <- su_x %>%
bind_rows(su_xz)
### Supplier numbers
sn_xz <- sn_x %>%
group_by(vendor_type) %>%
summarise(
call_location = "_global",
across(where(is.numeric), ~ median(.x, na.rm = TRUE))
) %>%
distinct()
sn_x <- sn_x %>%
bind_rows(sn_xz)
### Credit
cr_xz <- cr_x %>%
select(!n) %>%
# Horizontalize
pivot_wider(names_from = "item", values_from = "pc") %>%
replace(is.na(.),0)
# Create a line with medians of medians
cr_xz0 <- cr_xz %>%
summarise(across(!starts_with("call_location"), ~ median(.x, na.rm = TRUE))) %>%
mutate(call_location = "_global")
# Merge global values with locations
cr_x <- cr_xz %>%
bind_rows(cr_xz0) %>%
select(sort(names(.))) %>%
relocate(call_location)
### Credit numbers
cn_xz <- cn_x %>%
summarise(
call_location = "_global",
across(where(is.numeric), ~ median(.x, na.rm = TRUE))
) %>%
distinct()
cn_x <- cn_x %>%
bind_rows(cn_xz)
# Create analysed file
OUT <- createWorkbook()
# Add sheets to the workbook
addWorksheet(OUT, paste0("items"))
addWorksheet(OUT, paste0("stock"))
addWorksheet(OUT, paste0("barrier"))
addWorksheet(OUT, paste0("payment"))
addWorksheet(OUT, paste0("supplier1"))
addWorksheet(OUT, paste0("supplier2"))
addWorksheet(OUT, paste0("credit1"))
addWorksheet(OUT, paste0("credit2"))
# Write data to the sheets
writeData(OUT, sheet = paste0("items"), x = pr_i)
writeData(OUT, sheet = paste0("stock"), x = st_i)
writeData(OUT, sheet = paste0("barrier"), x = ba_x)
writeData(OUT, sheet = paste0("payment"), x = pa_x)
writeData(OUT, sheet = paste0("supplier1"), x = su_x)
writeData(OUT, sheet = paste0("supplier2"), x = sn_x)
writeData(OUT, sheet = paste0("credit1"), x = cr_x)
writeData(OUT, sheet = paste0("credit2"), x = cn_x)
# Export the file
saveWorkbook(OUT, paste0("JMMI_2020NOV_analysed_", ll,"_",Sys.Date() , ".xlsx"), overwrite=TRUE)
## lib
library(tidyverse)
library(openxlsx)
library(compareDF)
## Load inputs
data_hq <-"./outputs/JMMI_2020NOV_analysed_all_2021-03-17.xlsx"
data_team <- "./outputs/JMMI_2021FEB_analysed_all_2021-03-15.xlsx"
sheets <- openxlsx::getSheetNames(data_hq)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_hq)
names(SheetList) <- sheets
# team
sheets_t <- openxlsx::getSheetNames(data_team)
SheetList_t <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_team)
names(SheetList_t) <- sheets_t
View(SheetList)
install.packages("arsenal")
library(aresenal)
library(arsenal)
detach("package:compareDF", unload = TRUE)
# datasets
items_hq <- SheetList[[1]]
items_team <- SheetList_t[[1]]
comparedf(items_hq, items_team)
summary(comparedf(items_hq, items_team))
stock_hq <- SheetList[[2]]
stock_team <- SheetList_t[[2]]
summary(comparedf(stock_hq, stock_team))
bar_hq <- SheetList[[3]]
bar_team <- SheetList_t[[3]]
summary(comparedf(bar_hq, bar_team))
pay_hq <- SheetList[[4]]
pay_team <- SheetList_t[[4]]
summary(comparedf(pay_hq, pay_team))
sup1_hq <- SheetList[[5]]
sup1_team <- SheetList_t[[5]]
summary(comparedf(sup1_hq, sup1_team))
sup2_hq <- SheetList[[6]]
sup2_team <- SheetList_t[[6]]
summary(comparedf(sup2_hq, sup2_team))
cred1_hq <- SheetList[[7]]
cred1_team <- SheetList_t[[7]]
summary(comparedf(cred1_hq, cred1_team))
cred2_hq <- SheetList[[8]]
cred2_team <- SheetList_t[[8]]
summary(comparedf(cred2_hq, cred2_team))
rm(list = ls())
today <- Sys.Date()
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Source
source("./check_log.R")
source("./data_falsification.R")
## load inputs
df <- read.csv("./inputs/SOM2003_JMMI_Clean_Data_0821 v2.csv")
## load inputs
df <- read.csv("./inputs/SOM2003_JMMI_Clean_Data_0821 v2.csv")
names(df)[names(df) == "_uuid"] <- "uuid"
names(df)[names(df) == "_index"] <- "index" ## renaming the uuid col
## check issues
issues <- inspect_all(df) %>% filter(!str_detect(issue_type, "'other' response. may need recoding."))%>%
mutate(uuid=df[.$index,"uuid",drop=TRUE], ngo=df[.$index,"enumerator_ong", drop=TRUE])
View(issues)
write.xlsx(issues, paste0("./outputs/cleaning_check_",today,".xlsx"))
rm(list = ls())
today <- Sys.Date()
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Source
source("./check_log.R")
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.csv("./inputs/SOM2003_JMMI_Clean_Data_0821 v2.csv")
names(df)[names(df) == "_uuid"] <- "uuid"
names(df)[names(df) == "_index"] <- "index" ## renaming the uuid col
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
df.csv <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821 v2.csv")
df.csv <- read.csv("./inputs/SOM2003_JMMI_Clean_Data_0821 v2.csv")
library(arsenal)
all.equal(df, df.csv)
rm(list = ls())
today <- Sys.Date()
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
del <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "deletions")
## Utilities
`%nin` <- Negate(`%in%`)
## Wrangling
names(df)[names(df) == "_uuid"] <- "uuid"
names(df)[names(df) == "_index"] <- "index" ## renaming the uuid col
View(del)
df$index <- mutate(df, index = 1:nrow(.))
df$index <- mutate(df, index = 1:nrow())
df$index <- mutate(df, index = 1:nrow(df))
View(log)
## Wrangling
names(df)[names(df) == "X_uuid"] <- "uuid"
names(df)[names(df) == "X_index"] <- "index"
df$index <- mutate(df, index = 1:nrow(df))
## check that all uuids in log are removed from df
df$uuid %in% del$X_uuid
## check that all uuids in log are removed from df
del$X_uuid %in% df$uuid
tool <- read.xlsx("./inputs/jmmi_tool_2021_August.xlsx")
## check log
uuid.not.in.data <- log %>% filter(uuid %nin% df$uuid)
## Utilities
`%nin%` <- Negate(`%in%`)
## check log
uuid.not.in.data <- log %>% filter(uuid %nin% df$uuid)
uuid.not.in.data$uuid %in% del$X_uuid
View(uuid.not.in.data)
uuid.not.in.data <- uuid.not.in.data %>% filter(uuid %in% del$X_uuid)
write.xlsx(uuid.not.in.data, "./outputs/uuid_not_in_dataset.xlsx")
log <- log %>% filter(uuid %in% df$uuid)
questions.not.in.data <- log %>% filter(Question %nin% names(df))
View(questions.not.in.data)
log <- log %>% filter(Question %in% names(df))
View(check_log)
log.i <- check_log(df, log, variable = "Question", old_log_var = "Old_Value", new_log_var = "New_Value") %>%
mutate(., check = ifelse(New_Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
View(log)
log.i <- check_log(df, log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.i <- check_log(df, log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value")
View(log)
log.i <- check_log(df, log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
View(log)
log <- log %>% filter(Question %in% names(df))
View(log)
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
View(log)
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
## Source
source("./R/check_log.R")
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
## check issues
issues <- inspect_all(df) %>% filter(!str_detect(issue_type, "'other' response. may need recoding."))%>%
mutate(uuid=df[.$index,"uuid",drop=TRUE], ngo=df[.$index,"enumerator_ong", drop=TRUE])
issues <- issues %>% filter(uuid %in% log$uu)
View(issues)
## check issues
issues <- inspect_all(df) %>% filter(!str_detect(issue_type, "'other' response. may need recoding."))%>%
mutate(uuid=df[.$index,"uuid",drop=TRUE], ngo=df[.$index,"enumerator_ong", drop=TRUE])
issues <- issues %>% filter(uuid %nin% log$uuid)
View(issues)
## check issues
issues <- inspect_all(df) %>% filter(!str_detect(issue_type, "'other' response. may need recoding."))%>%
mutate(uuid=df[.$index,"uuid",drop=TRUE], ngo=df[.$index,"enumerator_ong", drop=TRUE])
View(issues)
View(df)
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
today <- Sys.Date()
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Utilities
`%nin%` <- Negate(`%in%`)
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
del <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "deletions")
tool <- read.xlsx("./inputs/jmmi_tool_2021_August.xlsx")
## Wrangling
names(df)[names(df) == "X_uuid"] <- "uuid"
names(df)[names(df) == "X_index"] <- "index"
df$index <- mutate(df, index = 1:nrow(df))
## check that all uuids in log are removed from df
del$X_uuid %in% df$uuid
## check log
## Check for uuid in log but not in data
uuid.not.in.data <- log %>% filter(uuid %nin% df$uuid)
uuid.not.in.data <- uuid.not.in.data %>% filter(uuid %in% del$X_uuid)
write.xlsx(uuid.not.in.data, "./outputs/uuid_not_in_dataset.xlsx")
## Check for questions in log but not in data
questions.not.in.data <- log %>% filter(Question %nin% names(df))
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid")
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(uuid.not.in.data, "./outputs/cleaning_log_not_applied.xlsx")
## check issues
issues <- inspect_all(df) %>% filter(!str_detect(issue_type, "'other' response. may need recoding."))%>%
mutate(uuid=df[.$index,"uuid",drop=TRUE], ngo=df[.$index,"enumerator_ong", drop=TRUE])
View(issues)
View(issues)
issues <- issues %>% filter(uuid %nin% log$uuid)
write.xlsx(issues, paste0("./outputs/cleaning_check_",today,".xlsx"))
View(df)
## falsification
false1 <- calculateEnumeratorSimilarity(df, tool, "enumerator_ong", "call_location")
## falsification
false1 <- calculateEnumeratorSimilarity(df, tool, "enumerator_org", "call_location")
View(false1)
false2 <- calculateDifferences(df, tool) %>% filter(number.different.columns < 5)
false2 <- calculateDifferences(df, tool)
View(tool)
tool$n <- NULL
false2 <- calculateDifferences(df, tool)
View(tool)
tool$name %in% names(df)
View(tool)
false2 <- calculateDifferences(data = df, tool.survey = tool)
false2 <- calculateDifferences(data = df, tool.survey = tool)
View(df)
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
View(df)
false2 <- calculateDifferences(data = df, tool.survey = tool)
View(false2)
false2 <- calculateDifferences(data = df, tool.survey = tool) %>% filter(number.different.columns < 5)
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Utilities
`%nin%` <- Negate(`%in%`)
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
del <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "deletions")
tool <- read.xlsx("./inputs/jmmi_tool_2021_August.xlsx")
## Wrangling
names(df)[names(df) == "X_uuid"] <- "uuid"
names(df)[names(df) == "X_index"] <- "index"
df$index <- mutate(df, index = 1:nrow(df))
tool$n <- NULL
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
View(log.i)
write.xlsx(log.i "./outputs/cleaning_log_not_applied.xlsx")
write.xlsx(log.i, "./outputs/cleaning_log_not_applied.xlsx")
rm(list = ls())
today <- Sys.Date()
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Utilities
`%nin%` <- Negate(`%in%`)
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
del <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "deletions")
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
rm(list = ls())
today <- Sys.Date()
## library
library(tidyverse)
library(cleaninginspectoR)
library(openxlsx)
library(cluster)
## Utilities
`%nin%` <- Negate(`%in%`)
## Source
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
## load inputs
df <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_checked")
log <- read.xlsx("./inputs/SOM2003_JMMI_Clean_Data_0821.xlsx", sheet = "data_log")
## Wrangling
names(df)[names(df) == "X_uuid"] <- "uuid"
names(df)[names(df) == "X_index"] <- "index"
df$index <- mutate(df, index = 1:nrow(df))
tool$n <- NULL
## Remove uuid and questions not in df from log
log <- log %>% filter(uuid %in% df$uuid)
log <- log %>% filter(Question %in% names(df))
log.i <- check_log(data = df, log = log, variable = "Question", old_log_var = "Old.Value", new_log_var = "New.Value", uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.1 <- log.i %>% filter(!duplicated(uuid))
View(log.1)
duplicated(log.i$uuid)
log.i <- log.i %>% filter(!duplicated(uuid))
write.xlsx(log.i, "./outputs/cleaning_log_not_applied.xlsx")
